/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export type InEuint256Struct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type InEuint256StructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export interface AnonymityTiersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "anonymousRecords"
      | "checkRecordTier"
      | "createAnonymousRecord"
      | "createIdentityRecord"
      | "createPseudonymousRecord"
      | "getAnonymousRecord"
      | "getIdentityRecord"
      | "getPseudonymousRecord"
      | "getUserUUIDs"
      | "identityRecords"
      | "pseudonymousRecords"
      | "userUUIDs"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnonymousRecordCreated"
      | "IdentityUpgrade"
      | "PseudonymousUpgrade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "anonymousRecords",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRecordTier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAnonymousRecord",
    values: [InEuint256Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "createIdentityRecord",
    values: [InEuint256Struct, InEuint256Struct, InEuint256Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "createPseudonymousRecord",
    values: [InEuint256Struct, InEuint256Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnonymousRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPseudonymousRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUUIDs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "identityRecords",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pseudonymousRecords",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userUUIDs",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "anonymousRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRecordTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAnonymousRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIdentityRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPseudonymousRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnonymousRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPseudonymousRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUUIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pseudonymousRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userUUIDs", data: BytesLike): Result;
}

export namespace AnonymousRecordCreatedEvent {
  export type InputTuple = [uuid: string, user: AddressLike];
  export type OutputTuple = [uuid: string, user: string];
  export interface OutputObject {
    uuid: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentityUpgradeEvent {
  export type InputTuple = [uuid: string, user: AddressLike];
  export type OutputTuple = [uuid: string, user: string];
  export interface OutputObject {
    uuid: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PseudonymousUpgradeEvent {
  export type InputTuple = [uuid: string, user: AddressLike];
  export type OutputTuple = [uuid: string, user: string];
  export interface OutputObject {
    uuid: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnonymityTiers extends BaseContract {
  connect(runner?: ContractRunner | null): AnonymityTiers;
  waitForDeployment(): Promise<this>;

  interface: AnonymityTiersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  anonymousRecords: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, boolean] & {
        worldProofCid: bigint;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  checkRecordTier: TypedContractMethod<[uuid: string], [bigint], "view">;

  createAnonymousRecord: TypedContractMethod<
    [encryptedWorldProofCid: InEuint256Struct],
    [string],
    "nonpayable"
  >;

  createIdentityRecord: TypedContractMethod<
    [
      encryptedWorldProofCid: InEuint256Struct,
      encryptedSignatureCid: InEuint256Struct,
      encryptedSelfProofCid: InEuint256Struct
    ],
    [string],
    "nonpayable"
  >;

  createPseudonymousRecord: TypedContractMethod<
    [
      encryptedWorldProofCid: InEuint256Struct,
      encryptedSignatureCid: InEuint256Struct
    ],
    [string],
    "nonpayable"
  >;

  getAnonymousRecord: TypedContractMethod<
    [uuid: string],
    [
      [bigint, bigint, boolean] & {
        worldProofCid: bigint;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getIdentityRecord: TypedContractMethod<
    [uuid: string],
    [
      [bigint, bigint, bigint, string, bigint, boolean] & {
        worldProofCid: bigint;
        signatureCid: bigint;
        selfProofCid: bigint;
        userAddress: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getPseudonymousRecord: TypedContractMethod<
    [uuid: string],
    [
      [bigint, bigint, string, bigint, boolean] & {
        worldProofCid: bigint;
        signatureCid: bigint;
        userAddress: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getUserUUIDs: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  identityRecords: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, string, bigint, boolean] & {
        worldProofCid: bigint;
        signatureCid: bigint;
        selfProofCid: bigint;
        userAddress: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  pseudonymousRecords: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, string, bigint, boolean] & {
        worldProofCid: bigint;
        signatureCid: bigint;
        userAddress: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  userUUIDs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "anonymousRecords"): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, boolean] & {
        worldProofCid: bigint;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkRecordTier"
  ): TypedContractMethod<[uuid: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "createAnonymousRecord"
  ): TypedContractMethod<
    [encryptedWorldProofCid: InEuint256Struct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createIdentityRecord"
  ): TypedContractMethod<
    [
      encryptedWorldProofCid: InEuint256Struct,
      encryptedSignatureCid: InEuint256Struct,
      encryptedSelfProofCid: InEuint256Struct
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPseudonymousRecord"
  ): TypedContractMethod<
    [
      encryptedWorldProofCid: InEuint256Struct,
      encryptedSignatureCid: InEuint256Struct
    ],
    [string],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "getAnonymousRecord"): TypedContractMethod<
    [uuid: string],
    [
      [bigint, bigint, boolean] & {
        worldProofCid: bigint;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "getIdentityRecord"): TypedContractMethod<
    [uuid: string],
    [
      [bigint, bigint, bigint, string, bigint, boolean] & {
        worldProofCid: bigint;
        signatureCid: bigint;
        selfProofCid: bigint;
        userAddress: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "getPseudonymousRecord"): TypedContractMethod<
    [uuid: string],
    [
      [bigint, bigint, string, bigint, boolean] & {
        worldProofCid: bigint;
        signatureCid: bigint;
        userAddress: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserUUIDs"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(nameOrSignature: "identityRecords"): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, string, bigint, boolean] & {
        worldProofCid: bigint;
        signatureCid: bigint;
        selfProofCid: bigint;
        userAddress: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "pseudonymousRecords"): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, string, bigint, boolean] & {
        worldProofCid: bigint;
        signatureCid: bigint;
        userAddress: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userUUIDs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "AnonymousRecordCreated"
  ): TypedContractEvent<
    AnonymousRecordCreatedEvent.InputTuple,
    AnonymousRecordCreatedEvent.OutputTuple,
    AnonymousRecordCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IdentityUpgrade"
  ): TypedContractEvent<
    IdentityUpgradeEvent.InputTuple,
    IdentityUpgradeEvent.OutputTuple,
    IdentityUpgradeEvent.OutputObject
  >;
  getEvent(
    key: "PseudonymousUpgrade"
  ): TypedContractEvent<
    PseudonymousUpgradeEvent.InputTuple,
    PseudonymousUpgradeEvent.OutputTuple,
    PseudonymousUpgradeEvent.OutputObject
  >;

  filters: {
    "AnonymousRecordCreated(string,address)": TypedContractEvent<
      AnonymousRecordCreatedEvent.InputTuple,
      AnonymousRecordCreatedEvent.OutputTuple,
      AnonymousRecordCreatedEvent.OutputObject
    >;
    AnonymousRecordCreated: TypedContractEvent<
      AnonymousRecordCreatedEvent.InputTuple,
      AnonymousRecordCreatedEvent.OutputTuple,
      AnonymousRecordCreatedEvent.OutputObject
    >;

    "IdentityUpgrade(string,address)": TypedContractEvent<
      IdentityUpgradeEvent.InputTuple,
      IdentityUpgradeEvent.OutputTuple,
      IdentityUpgradeEvent.OutputObject
    >;
    IdentityUpgrade: TypedContractEvent<
      IdentityUpgradeEvent.InputTuple,
      IdentityUpgradeEvent.OutputTuple,
      IdentityUpgradeEvent.OutputObject
    >;

    "PseudonymousUpgrade(string,address)": TypedContractEvent<
      PseudonymousUpgradeEvent.InputTuple,
      PseudonymousUpgradeEvent.OutputTuple,
      PseudonymousUpgradeEvent.OutputObject
    >;
    PseudonymousUpgrade: TypedContractEvent<
      PseudonymousUpgradeEvent.InputTuple,
      PseudonymousUpgradeEvent.OutputTuple,
      PseudonymousUpgradeEvent.OutputObject
    >;
  };
}
